AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Function
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: Function
      CodeUri: src/Function
      Handler: handler.handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref db2RootUserSecret
        - Statement:
            - Effect: Allow
              Action:
                - rds-data:BatchExecuteStatement
                - rds-data:BeginTransaction
                - rds-data:CommitTransaction
                - rds-data:ExecuteStatement
                - rds-data:RollbackTransaction
              Resource:
                - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${db2}
      Events:
        api1GET:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref api1
      Environment:
        Variables:
          DB_ID: !Ref db2
          DB_ADDRESS: !GetAtt db2.Endpoint.Address
          DB_PORT: !GetAtt db2.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${db2}
          DB_ROOT_USER_SECRET_ARN: !Ref db2RootUserSecret
  api1:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: api1
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowHeaders: '''Authorization,Content-Type'''
        AllowOrigin: '''*'''
  db2:
    Type: AWS::RDS::DBCluster
    Properties:
      BackupRetentionPeriod: 1
      DBSubnetGroupName: !Ref db2SubnetGroup
      Engine: aurora-mysql
      EngineMode: serverless
      MasterUsername: !Sub '{{resolve:secretsmanager:${db2RootUserSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${db2RootUserSecret}:SecretString:password}}'
      EnableHttpEndpoint: true
      ScalingConfiguration:
        AutoPause: false
        MinCapacity: 2
        MaxCapacity: 2
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref db2SecurityGroup
  db2SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
        - ResourceName: db2
      SubnetIds: !Ref DefaultVPCSubnets
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
            - ResourceName: db2
  db2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Security Group
            - ResourceName: db2
      VpcId: !Ref DefaultVPCId
  db2RootUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub
        - Root user login info for Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName}
        - ResourceName: db2
      GenerateSecretString:
        SecretStringTemplate: '{"username": "root"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      Name: !Sub /${EnvironmentTagName}/${StackTagName}/db2/RootUser
  db2RootUserSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref db2RootUserSecret
      TargetId: !Ref db2
      TargetType: AWS::RDS::DBCluster
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  DefaultVPCId:
    Type: AWS::EC2::VPC::Id
    Description: AWS account-specific default VPC ID (injected by Stackery at deployment time)
  DefaultVPCSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: AWS account-specific default VPC subnets (injected by Stackery at deployment time)